
---------------------------------------------
ENTITIES
---------------------------------------------

@client
@server

---------------------------------------------
METHODS
---------------------------------------------

-- Initialize action on server and client
registerAction(actionName: string): {
    -- send action event to server
    dispatchEvent(eventName: string, callback: (eventName: string) -> ()): ()
    -- send action end to server
    end(): ()
}

subscribeToAction(actionName: string, callback: (eventName: string) -> ()): Signal


---------------------------------------------
EVENTS
---------------------------------------------

CharacterActionBegan(actionName: string)
CharacterActionEventReached(eventName: string)
CharacterActionEnded(actionName: string)

---------------------------------------------
CLIENT
---------------------------------------------

@client (Detect input)
    [Run function to play effect]
    [Signal to server that CharacterAction begun with CharacterAction name]
    [Handle CharacterAction events]

    (Reach CharacterAction key moment)
        [Signal to server that action CharacterActionEvent reached with keypoint name]

    (End action)
        [Signal to server that action ended with CharacterActionEnded]

@client (Receive action begun signal)
    [Load CharacterAction]
    [Play CharacterAction up to first CharacterActionEvent]


---------------------------------------------
SERVER
---------------------------------------------

@server (Receive CharacterActionBegan signal)
    [Send animation ID to others players]
    [Cache animation state]

@server (Receive keypoint reached signal)
    [Send actionkeypoint ID]

@server (Receive action ended signal)
    [Send animation ID to others players]
    [Remove action state from cache]